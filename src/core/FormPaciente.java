/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package core;

import dao.DaoBairro;
import dao.DaoCidade;
import dao.DaoEstado;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import model.BeansPaciente;
import util.ConexaoBD;
import dao.DaoPaciente;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import model.BeansBairro;
import model.BeansCidade;
import model.BeansEstado;

/**
 *
 * @author MarceloMartinsVilara
 */
public class FormPaciente extends javax.swing.JFrame {

    // esta lista será utilizada para armazenar os id dos estados 
    static ArrayList listaEstado = new ArrayList();
    // esta lista será utilizada para armazenar os id das cidades
    static ArrayList listaCidade = new ArrayList();
    // esta lista será utilizada para armazenar os id dos bairros
    static ArrayList listaBairro = new ArrayList();

    ConexaoBD conecta = new ConexaoBD();
   static BeansPaciente usu = new BeansPaciente();
    DaoPaciente mod = new DaoPaciente();
    BeansBairro bb = new BeansBairro();
    DaoBairro bairro = new DaoBairro();
    BeansEstado es = new BeansEstado();
    DaoEstado estado = new DaoEstado();
    BeansCidade ci = new BeansCidade();
    DaoCidade cidade = new DaoCidade();

    // esta flag será utilizada para o botão salvar diferenciar ações
    static int flag = 0;
    static int flag1 = 0; // está sendo usado para verificar se houve retorno da busca pela consulta no Banco de Dados
    public FormPaciente() throws ClassNotFoundException, SQLException {
        initComponents();
        try {
            preencherbairros();
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Erro ao preencher os nomes dos bairros");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Erro ao preencher os nomes dos bairros");
        }
        // método para preencher automaticamente a lista de estados do formulário
        preencheEstados();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldNomePaciente = new javax.swing.JTextField();
        jFormattedTextFieldRgPaciente = new javax.swing.JFormattedTextField();
        jFormattedTextFieldEmailPaciente = new javax.swing.JFormattedTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldTelePaciente = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jTextFieldRuaPaciente = new javax.swing.JTextField();
        jTextFieldNrPaciente = new javax.swing.JTextField();
        jTextFieldComplemPaciente = new javax.swing.JTextField();
        jComboBoxBairroPaciente = new javax.swing.JComboBox();
        jComboBoxEstado = new javax.swing.JComboBox();
        jComboBoxCidade = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButtonNovoPaciente = new javax.swing.JButton();
        jButtonSalvarPaciente = new javax.swing.JButton();
        jButtonCancelarPaciente = new javax.swing.JButton();
        jButtonAlterarPaciente = new javax.swing.JButton();
        jButtonExcluirPaciente = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jTextFieldPesquisarPaciente = new javax.swing.JTextField();
        jDateChooserDataNascimentoPac = new com.toedter.calendar.JDateChooser();
        jButtonBuscarPaciente = new javax.swing.JButton();
        jLabelID = new javax.swing.JLabel();
        jLabelTituloPaciente = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("framePaciente"); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("Nome");

        jLabel2.setText("Nascimento");

        jLabel3.setText("Email");

        jLabel4.setText("RG");

        jTextFieldNomePaciente.setEnabled(false);
        jTextFieldNomePaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldNomePacienteActionPerformed(evt);
            }
        });

        jFormattedTextFieldRgPaciente.setEnabled(false);

        jFormattedTextFieldEmailPaciente.setEnabled(false);

        jLabel5.setText("Telefone");

        jTextFieldTelePaciente.setEnabled(false);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel7.setText("Rua");

        jLabel8.setText("Nr");

        jLabel9.setText("Complemento");

        jLabel10.setText("Bairro");

        jLabel11.setText("Estado");

        jLabel12.setText("Cidade");

        jTextFieldRuaPaciente.setEnabled(false);

        jTextFieldNrPaciente.setEnabled(false);

        jTextFieldComplemPaciente.setEnabled(false);

        jComboBoxBairroPaciente.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Selecione o bairro", "Compensa", "Vieira", "Pq10", "Centro" }));
        jComboBoxBairroPaciente.setEnabled(false);
        jComboBoxBairroPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxBairroPacienteActionPerformed(evt);
            }
        });

        jComboBoxEstado.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxEstado.setEnabled(false);
        jComboBoxEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxEstadoActionPerformed(evt);
            }
        });

        jComboBoxCidade.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxCidade.setEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(jTextFieldRuaPaciente)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldNrPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldComplemPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBoxBairroPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBoxEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxCidade, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jTextFieldRuaPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldNrPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldComplemPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(jComboBoxBairroPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxCidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jButtonNovoPaciente.setText("NOVO");
        jButtonNovoPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNovoPacienteActionPerformed(evt);
            }
        });

        jButtonSalvarPaciente.setText("SALVAR");
        jButtonSalvarPaciente.setEnabled(false);
        jButtonSalvarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalvarPacienteActionPerformed(evt);
            }
        });

        jButtonCancelarPaciente.setText("CANCELAR");
        jButtonCancelarPaciente.setEnabled(false);
        jButtonCancelarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarPacienteActionPerformed(evt);
            }
        });

        jButtonAlterarPaciente.setText("ALTERAR");
        jButtonAlterarPaciente.setEnabled(false);
        jButtonAlterarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAlterarPacienteActionPerformed(evt);
            }
        });

        jButtonExcluirPaciente.setText("EXCLUIR");
        jButtonExcluirPaciente.setEnabled(false);
        jButtonExcluirPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExcluirPacienteActionPerformed(evt);
            }
        });

        jLabel13.setText("Endereço");

        jDateChooserDataNascimentoPac.setEnabled(false);

        jButtonBuscarPaciente.setText("Buscar");
        jButtonBuscarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBuscarPacienteActionPerformed(evt);
            }
        });

        jLabelID.setText("id");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addGap(51, 51, 51)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel1)
                                .addComponent(jLabel4))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jFormattedTextFieldRgPaciente)
                                    .addGap(23, 23, 23)
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jFormattedTextFieldEmailPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jTextFieldNomePaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(25, 25, 25)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jTextFieldTelePaciente, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                                .addComponent(jDateChooserDataNascimentoPac, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(21, 21, 21)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel13)
                                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 863, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(169, 169, 169)
                        .addComponent(jButtonNovoPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonSalvarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonCancelarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonAlterarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonExcluirPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(190, 190, 190)
                        .addComponent(jTextFieldPesquisarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonBuscarPaciente)
                        .addGap(55, 55, 55)
                        .addComponent(jLabelID)))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jLabel2)
                        .addComponent(jTextFieldNomePaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jDateChooserDataNascimentoPac, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jFormattedTextFieldRgPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jFormattedTextFieldEmailPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jTextFieldTelePaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldPesquisarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonBuscarPaciente)
                    .addComponent(jLabelID))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonNovoPaciente)
                    .addComponent(jButtonSalvarPaciente)
                    .addComponent(jButtonCancelarPaciente)
                    .addComponent(jButtonAlterarPaciente)
                    .addComponent(jButtonExcluirPaciente))
                .addGap(35, 35, 35))
        );

        jLabelTituloPaciente.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jLabelTituloPaciente.setText("Cadastro de Pacientes");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelTituloPaciente)
                .addGap(377, 377, 377))
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelTituloPaciente)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(155, 155, 155))
        );

        setSize(new java.awt.Dimension(990, 592));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public void preencherbairros() throws ClassNotFoundException, SQLException {
        conecta.conect();

        conecta.executaSql("SELECT * FROM bairro ORDER BY bairro_nome");
        conecta.rs.first();
        jComboBoxBairroPaciente.removeAllItems();
        jComboBoxBairroPaciente.addItem("Selecione...");
        do {
            jComboBoxBairroPaciente.addItem(conecta.rs.getString("bairro_nome")); // preenchimento automático do combobox de bairros buscando do banco de dados
            listaBairro.add(conecta.rs.getInt("bairro_cod")); // seleciona o id do campo escolhis
        } while (conecta.rs.next());

        conecta.desconecta();
    }

    // metodo utilizado para preencher o combo bairro apos consulta 
    public void preencherbairrosConsulta() throws ClassNotFoundException, SQLException {
        conecta.conect();
        conecta.executaSql("SELECT * FROM bairro ORDER BY bairro_nome");
        conecta.rs.first();
        do {
            jComboBoxBairroPaciente.addItem(conecta.rs.getString("bairro_nome")); // preenchimento automático do combobox de bairros buscando do banco de dados
        } while (conecta.rs.next());
        conecta.desconecta();
    }

    public void preencheEstados() throws ClassNotFoundException, SQLException {
        conecta.conect();
        String sql = "SELECT * FROM estados";
        conecta.stm = conecta.coc.prepareStatement(sql);
        conecta.rs = conecta.stm.executeQuery(sql);
        jComboBoxEstado.removeAllItems();
        jComboBoxEstado.addItem("Selecione...");
        while (conecta.rs.next()) {
            jComboBoxEstado.addItem(conecta.rs.getString("sigla"));
            listaEstado.add(conecta.rs.getInt("cod_estados")); // seleciona o id do campo escolhis
        }

        conecta.conect();
        // System.out.println(listaEstado);
    }

    public void preencheCidades(String cod) throws ClassNotFoundException, SQLException {
        conecta.conect();
        String sql = "SELECT * FROM cidades WHERE estados_cod_estados=" + cod;
        conecta.stm = conecta.coc.prepareStatement(sql);
        conecta.rs = conecta.stm.executeQuery(sql);
        jComboBoxCidade.removeAllItems();
        jComboBoxCidade.addItem("Selecione...");
        while (conecta.rs.next()) {
            jComboBoxCidade.addItem(conecta.rs.getString("nome"));
            listaCidade.add(conecta.rs.getInt("cod_cidades"));
        }

        conecta.conect();
        //    System.out.println(listaCidade);
    }


    private void jTextFieldNomePacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldNomePacienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldNomePacienteActionPerformed

    private void jButtonSalvarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalvarPacienteActionPerformed

      
        //   System.out.println(jComboBoxCidade.getSelectedIndex()-1);
        if (jTextFieldNomePaciente.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Favor preencher o campo nome do paciente!");
            jTextFieldNomePaciente.requestFocus();
            return;
        }

        if (jDateChooserDataNascimentoPac.getDate() == null) {
            JOptionPane.showMessageDialog(null, "Favor preencher o campo data!");
            jDateChooserDataNascimentoPac.requestFocus();
            return;
        }

        if (jFormattedTextFieldRgPaciente.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Favor preencher o campo RG!");
            jFormattedTextFieldRgPaciente.requestFocus();
            return;
        }

        if (jFormattedTextFieldEmailPaciente.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Favor preencher o campo e-mail!");
            jFormattedTextFieldEmailPaciente.requestFocus();
            return;
        }

        if (jTextFieldTelePaciente.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Favor preencher o campo telefone!");
            jTextFieldTelePaciente.requestFocus();
            return;
        }

        if (jTextFieldRuaPaciente.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Favor preencher o campo rua!");
            jTextFieldRuaPaciente.requestFocus();
            return;
        }

        if (jTextFieldNrPaciente.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Favor preencher o campo número!");
            jTextFieldNrPaciente.requestFocus();
            return;
        }
        if (jTextFieldComplemPaciente.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Favor preencher o campo complemento!");
            jTextFieldComplemPaciente.requestFocus();
            return;
        }

        if (Integer.valueOf(jComboBoxBairroPaciente.getSelectedIndex()) == 0) {
            JOptionPane.showMessageDialog(null, "Favor escolher um bairro!");
            jComboBoxBairroPaciente.requestFocus();
            return;
        }
        
         if (Integer.valueOf(jComboBoxEstado.getSelectedIndex()) == 0) {
            JOptionPane.showMessageDialog(null, "Favor escolher um estado!");
            jComboBoxEstado.requestFocus();
            return;
        }
          if (Integer.valueOf(jComboBoxCidade.getSelectedIndex()) == 0) {
            JOptionPane.showMessageDialog(null, "Favor escolher uma cidade!");
            jComboBoxCidade.requestFocus();
            return;
        }
               
      
            usu.setPac_nome(jTextFieldNomePaciente.getText());
            SimpleDateFormat formatador = new SimpleDateFormat("yyyy-MM-dd");// transforma a data para o formato do banco de dados

            usu.setPac_nascimento(formatador.format(jDateChooserDataNascimentoPac.getDate()));
            usu.setPac_rg(String.valueOf(jFormattedTextFieldRgPaciente.getText()));
            usu.setPac_email(String.valueOf(jFormattedTextFieldEmailPaciente.getText()));
            usu.setPac_telefone(jTextFieldTelePaciente.getText());
            usu.setPac_rua(jTextFieldRuaPaciente.getText());
            usu.setPac_nr(Integer.valueOf(jTextFieldNrPaciente.getText()));
            usu.setPac_complemento(jTextFieldComplemPaciente.getText());
            
             // pega o índice da lista baseado no index do combobox menos 1 e insere na lista que armazena os id dos bairros
            int idBairro = (int) listaBairro.get(jComboBoxBairroPaciente.getSelectedIndex() - 1);
            usu.setPac_bairro(idBairro);
            
            // pega o índice da lista baseado no index do combobox menos 1 e insere na lista que armazena os id das cidades
            int idCidade = (int) listaCidade.get(jComboBoxCidade.getSelectedIndex() - 1);
            usu.setPac_cidade(idCidade);
            
            // pega o índice da lista baseado no index do combobox menos 1 e insere na lista que armazena os id dos estados
            int idEstado = (int) listaEstado.get(jComboBoxEstado.getSelectedIndex() - 1);
            usu.setPac_estado(idEstado);
            
        try {
            if(flag == 1){
            mod.salvar(usu);
            JOptionPane.showMessageDialog(null, "Registro inserido com sucesso");       
            }
            if(flag == 2){
            mod.editar(usu);
            JOptionPane.showMessageDialog(null, "Registro alterado com sucesso");   
            }
           
            //   usu.setIdPaciente(Integer.valueOf(jLabelID.getText()));
            
            
           
            jTextFieldNomePaciente.setEnabled(false);
            jTextFieldTelePaciente.setEnabled(false);
            jTextFieldRuaPaciente.setEnabled(false);
            jTextFieldNrPaciente.setEnabled(false);
            jTextFieldComplemPaciente.setEnabled(false);
            jTextFieldPesquisarPaciente.setEnabled(true);
            
            jTextFieldNomePaciente.setText("");
            jTextFieldTelePaciente.setText("");
            jTextFieldRuaPaciente.setText("");
            jTextFieldNrPaciente.setText("");
            jTextFieldComplemPaciente.setText("");
            
            jFormattedTextFieldRgPaciente.setText("");
            jFormattedTextFieldRgPaciente.setEnabled(false);
            jFormattedTextFieldEmailPaciente.setText("");
            jFormattedTextFieldEmailPaciente.setEnabled(false);
            jDateChooserDataNascimentoPac.setDate(null);
            jDateChooserDataNascimentoPac.setEnabled(false);
            jComboBoxBairroPaciente.setSelectedIndex(0);
            jComboBoxBairroPaciente.setEnabled(false);
            jComboBoxCidade.setSelectedIndex(0);
            jComboBoxCidade.setEnabled(false);
            jComboBoxEstado.setSelectedIndex(0);
            jComboBoxEstado.setEnabled(false);
            
            jButtonAlterarPaciente.setEnabled(false);
            jButtonCancelarPaciente.setEnabled(false);
            jButtonExcluirPaciente.setEnabled(false);
            jButtonNovoPaciente.setEnabled(true);
            jButtonSalvarPaciente.setEnabled(false);
            jButtonBuscarPaciente.setEnabled(true);
            
            
              } catch (ClassNotFoundException ex) {
            Logger.getLogger(FormPaciente.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(FormPaciente.class.getName()).log(Level.SEVERE, null, ex);
        }
         

        

    }//GEN-LAST:event_jButtonSalvarPacienteActionPerformed

    private void jButtonNovoPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNovoPacienteActionPerformed
        
        jTextFieldNomePaciente.setEnabled(true);
        jTextFieldTelePaciente.setEnabled(true);
        jTextFieldRuaPaciente.setEnabled(true);
        jTextFieldNrPaciente.setEnabled(true);
        jTextFieldComplemPaciente.setEnabled(true);
        jComboBoxEstado.setEnabled(true);
        jComboBoxCidade.setEnabled(true);
        jTextFieldPesquisarPaciente.setEnabled(false);

        jFormattedTextFieldRgPaciente.setEnabled(true);
        jFormattedTextFieldEmailPaciente.setEnabled(true);

        jComboBoxBairroPaciente.setSelectedIndex(0);
        jComboBoxBairroPaciente.setEnabled(true);

        jButtonAlterarPaciente.setEnabled(false);
        jButtonCancelarPaciente.setEnabled(true);
        jButtonExcluirPaciente.setEnabled(false);
        jButtonNovoPaciente.setEnabled(false);
        jButtonSalvarPaciente.setEnabled(true);
        jButtonBuscarPaciente.setEnabled(false);
        jDateChooserDataNascimentoPac.setEnabled(true);
        flag = 1;
    }//GEN-LAST:event_jButtonNovoPacienteActionPerformed

    private void jButtonCancelarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarPacienteActionPerformed
        jTextFieldNomePaciente.setEnabled(false);
        jTextFieldTelePaciente.setEnabled(false);
        jTextFieldRuaPaciente.setEnabled(false);
        jTextFieldNrPaciente.setEnabled(false);
        jTextFieldComplemPaciente.setEnabled(false);
      
        jTextFieldPesquisarPaciente.setEnabled(true);

        jTextFieldNomePaciente.setText("");
        jTextFieldTelePaciente.setText("");
        jTextFieldRuaPaciente.setText("");
        jTextFieldNrPaciente.setText("");
        jTextFieldComplemPaciente.setText("");
      
        jDateChooserDataNascimentoPac.setDate(null);
        jFormattedTextFieldRgPaciente.setText("");
        jFormattedTextFieldEmailPaciente.setText("");
        jComboBoxBairroPaciente.setSelectedIndex(0);
        jFormattedTextFieldRgPaciente.setEnabled(false);
        jFormattedTextFieldEmailPaciente.setEnabled(false);
        jDateChooserDataNascimentoPac.setEnabled(false);
        jComboBoxBairroPaciente.setEnabled(false);
        jComboBoxCidade.setSelectedIndex(0);
        jComboBoxCidade.setEnabled(false);
        jComboBoxEstado.setSelectedIndex(0);
        jComboBoxEstado.setEnabled(false);

        jButtonAlterarPaciente.setEnabled(false);
        jButtonCancelarPaciente.setEnabled(false);
        jButtonExcluirPaciente.setEnabled(false);
        jButtonNovoPaciente.setEnabled(true);
        jButtonSalvarPaciente.setEnabled(false);
        jButtonBuscarPaciente.setEnabled(true);
    }//GEN-LAST:event_jButtonCancelarPacienteActionPerformed

    private void jButtonAlterarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAlterarPacienteActionPerformed
        flag = 2;
        jTextFieldNomePaciente.setEnabled(true);
        jTextFieldTelePaciente.setEnabled(true);
        jTextFieldRuaPaciente.setEnabled(true);
        jTextFieldNrPaciente.setEnabled(true);
        jTextFieldComplemPaciente.setEnabled(true);       
        jTextFieldPesquisarPaciente.setEnabled(false);
        jFormattedTextFieldRgPaciente.setEnabled(true);
        jFormattedTextFieldEmailPaciente.setEnabled(true);
        jDateChooserDataNascimentoPac.setEnabled(true);
        jComboBoxBairroPaciente.setEnabled(true);
        jComboBoxCidade.setEnabled(true);
        jComboBoxEstado.setEnabled(true);
        
        jButtonAlterarPaciente.setEnabled(false);
        jButtonCancelarPaciente.setEnabled(true);
        jButtonExcluirPaciente.setEnabled(true);
        jButtonNovoPaciente.setEnabled(false);
        jButtonSalvarPaciente.setEnabled(true);
        jButtonBuscarPaciente.setEnabled(false);
    }//GEN-LAST:event_jButtonAlterarPacienteActionPerformed

    private void jButtonExcluirPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExcluirPacienteActionPerformed
        int resposta = 0;
        resposta = JOptionPane.showConfirmDialog(rootPane, "Deseja realmente excluir o registro");
        if (resposta == JOptionPane.YES_OPTION) {
            usu.setIdPaciente(Integer.valueOf(jLabelID.getText()));
            try {
                mod.excluirUsu(usu);
                usu.setIdPaciente(0);
                            } catch (ClassNotFoundException ex) {
                Logger.getLogger(FormPaciente.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(FormPaciente.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        jTextFieldNomePaciente.setEnabled(false);
        jTextFieldTelePaciente.setEnabled(false);
        jTextFieldRuaPaciente.setEnabled(false);
        jTextFieldNrPaciente.setEnabled(false);
        jTextFieldComplemPaciente.setEnabled(false);
      
        jTextFieldPesquisarPaciente.setEnabled(true);

        jTextFieldNomePaciente.setText("");
        jTextFieldTelePaciente.setText("");
        jTextFieldRuaPaciente.setText("");
        jTextFieldNrPaciente.setText("");
        jTextFieldComplemPaciente.setText("");
      
        jDateChooserDataNascimentoPac.setDate(null);
        jFormattedTextFieldRgPaciente.setText("");
        jFormattedTextFieldEmailPaciente.setText("");
        jComboBoxBairroPaciente.setSelectedIndex(0);
        jFormattedTextFieldRgPaciente.setEnabled(false);
        jFormattedTextFieldEmailPaciente.setEnabled(false);
        jDateChooserDataNascimentoPac.setEnabled(false);
        jComboBoxBairroPaciente.setEnabled(false);
        jComboBoxCidade.setSelectedIndex(0);
        jComboBoxCidade.setEnabled(false);
        jComboBoxEstado.setSelectedIndex(0);
        jComboBoxEstado.setEnabled(false);

        jButtonAlterarPaciente.setEnabled(false);
        jButtonCancelarPaciente.setEnabled(false);
        jButtonExcluirPaciente.setEnabled(false);
        jButtonNovoPaciente.setEnabled(true);
        jButtonSalvarPaciente.setEnabled(false);
        jButtonBuscarPaciente.setEnabled(true);
    }//GEN-LAST:event_jButtonExcluirPacienteActionPerformed

    private void jButtonBuscarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBuscarPacienteActionPerformed
        
        BeansPaciente pac = new BeansPaciente();
        pac.setPac_nome(jTextFieldPesquisarPaciente.getText());
        try {
            pac = mod.buscaPac(pac); 
            System.out.println(pac.getIdPaciente());
            flag1 = pac.getIdPaciente();// verifica se existe a consulta retorna resultado
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FormPaciente.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(FormPaciente.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if(flag1>0){ // só executa o códigp se a busca retorna algum resultado
            
            try {
                jTextFieldNomePaciente.setText(pac.getPac_nome());
                // criar data a partir da string pega do usu.getPac_nascimento();
                String data = pac.getPac_nascimento();
                SimpleDateFormat formatador = new SimpleDateFormat("yyyy-MM-dd");
                Date dataConvertida = formatador.parse(data);
                jDateChooserDataNascimentoPac.setDate(dataConvertida);                
                // continuação do filtro
                jFormattedTextFieldRgPaciente.setText(pac.getPac_email());
                jFormattedTextFieldEmailPaciente.setText(pac.getPac_email());
                jTextFieldTelePaciente.setText(pac.getPac_telefone());
                jTextFieldRuaPaciente.setText(pac.getPac_rua());
                jTextFieldNrPaciente.setText(String.valueOf(pac.getPac_nr()));
                jTextFieldComplemPaciente.setText(pac.getPac_complemento());
                jLabelID.setText(String.valueOf(pac.getIdPaciente()));
                // preenche o bairro no combo quando é clicado em buscar
                String ba = bairro.buscaBairro(pac.getPac_bairro());
                preencherbairros();
                jComboBoxBairroPaciente.setSelectedItem(ba);
                // preenche o estado no combo quando é clicado em buscar
                String es = estado.buscaEstado(pac.getPac_estado());
                preencheEstados();
                jComboBoxEstado.setSelectedItem(es);
                // preenche cidade no combo quando é clicado em buscar
                String cid = cidade.buscaCidade(pac.getPac_cidade());
                jComboBoxCidade.setSelectedItem(cid);               
                jButtonAlterarPaciente.setEnabled(true);
                jButtonCancelarPaciente.setEnabled(true);
                jButtonExcluirPaciente.setEnabled(true);
                jButtonNovoPaciente.setEnabled(false);
                jButtonSalvarPaciente.setEnabled(false);
                jButtonBuscarPaciente.setEnabled(true);
            } catch (ParseException ex) {
                Logger.getLogger(FormPaciente.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(FormPaciente.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(FormPaciente.class.getName()).log(Level.SEVERE, null, ex);
            }

                
        }else{
              jTextFieldNomePaciente.setEnabled(false);
        jTextFieldTelePaciente.setEnabled(false);
        jTextFieldRuaPaciente.setEnabled(false);
        jTextFieldNrPaciente.setEnabled(false);
        jTextFieldComplemPaciente.setEnabled(false);
      
        jTextFieldPesquisarPaciente.setEnabled(true);

        jTextFieldNomePaciente.setText("");
        jTextFieldTelePaciente.setText("");
        jTextFieldRuaPaciente.setText("");
        jTextFieldNrPaciente.setText("");
        jTextFieldComplemPaciente.setText("");
      
        jDateChooserDataNascimentoPac.setDate(null);
        jFormattedTextFieldRgPaciente.setText("");
        jFormattedTextFieldEmailPaciente.setText("");
        jComboBoxBairroPaciente.setSelectedIndex(0);
        jFormattedTextFieldRgPaciente.setEnabled(false);
        jFormattedTextFieldEmailPaciente.setEnabled(false);
        jDateChooserDataNascimentoPac.setEnabled(false);
        jComboBoxBairroPaciente.setEnabled(false);
        jComboBoxCidade.setSelectedIndex(0);
        jComboBoxCidade.setEnabled(false);
        jComboBoxEstado.setSelectedIndex(0);
        jComboBoxEstado.setEnabled(false);
        
        jLabelID.setText(String.valueOf(0));

        jButtonAlterarPaciente.setEnabled(false);
        jButtonCancelarPaciente.setEnabled(false);
        jButtonExcluirPaciente.setEnabled(false);
        jButtonNovoPaciente.setEnabled(true);
        jButtonSalvarPaciente.setEnabled(false);
        jButtonBuscarPaciente.setEnabled(true);
        }


    }//GEN-LAST:event_jButtonBuscarPacienteActionPerformed

    private void jComboBoxBairroPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxBairroPacienteActionPerformed

    }//GEN-LAST:event_jComboBoxBairroPacienteActionPerformed

    private void jComboBoxEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxEstadoActionPerformed
        String dad = String.valueOf(jComboBoxEstado.getSelectedItem());
        if (!dad.equalsIgnoreCase("Selecione...") && !dad.equalsIgnoreCase("null")) {

            int pos = (int) listaEstado.get(jComboBoxEstado.getSelectedIndex() - 1); // pega o índice da lista baseado no index do combobox menos 1

            jComboBoxCidade.removeAllItems();
            jComboBoxCidade.addItem("Selecione...");
            try {
                preencheCidades(String.valueOf(pos));
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(FormPaciente.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(FormPaciente.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            jComboBoxCidade.removeAllItems();
            jComboBoxCidade.addItem("Selecione o estado antes...");
        }


    }//GEN-LAST:event_jComboBoxEstadoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new FormPaciente().setVisible(true);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(FormPaciente.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(FormPaciente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAlterarPaciente;
    private javax.swing.JButton jButtonBuscarPaciente;
    private javax.swing.JButton jButtonCancelarPaciente;
    private javax.swing.JButton jButtonExcluirPaciente;
    private javax.swing.JButton jButtonNovoPaciente;
    private javax.swing.JButton jButtonSalvarPaciente;
    private javax.swing.JComboBox jComboBoxBairroPaciente;
    private javax.swing.JComboBox jComboBoxCidade;
    private javax.swing.JComboBox jComboBoxEstado;
    private com.toedter.calendar.JDateChooser jDateChooserDataNascimentoPac;
    private javax.swing.JFormattedTextField jFormattedTextFieldEmailPaciente;
    private javax.swing.JFormattedTextField jFormattedTextFieldRgPaciente;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelID;
    private javax.swing.JLabel jLabelTituloPaciente;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextFieldComplemPaciente;
    private javax.swing.JTextField jTextFieldNomePaciente;
    private javax.swing.JTextField jTextFieldNrPaciente;
    private javax.swing.JTextField jTextFieldPesquisarPaciente;
    private javax.swing.JTextField jTextFieldRuaPaciente;
    private javax.swing.JTextField jTextFieldTelePaciente;
    // End of variables declaration//GEN-END:variables
}
